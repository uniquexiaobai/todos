{"version":3,"sources":["serviceWorker.ts","store.ts","constants.ts","Header.tsx","Main.tsx","Footer.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","nowShowing","todos","Header","input","useRef","dispatch","useDispatch","useState","text","setText","useEffect","current","focus","className","ref","placeholder","value","onChange","e","target","onKeyDown","keyCode","trim","todo","id","Date","now","completed","type","payload","TodoItem","editingInput","editingText","setEditingText","editing","setEditing","onDestroy","onBlur","name","classNames","checked","onDoubleClick","onClick","which","Main","useSelector","state","activeTodoCount","reduce","total","showTodos","filter","map","key","Footer","onToggleShowing","length","selected","App","store","createStore","action","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2kBCQC,IAAMC,EAAyB,CACrCC,WC3BgC,MD4BhCC,MAAO,I,OE4BOC,EAnDU,WACxB,IAAMC,EAAQC,iBAAyB,MACjCC,EAAWC,wBAFa,EAGNC,mBAAiB,IAHX,mBAGvBC,EAHuB,KAGjBC,EAHiB,KAK9BC,qBAAU,WACLP,GAASA,EAAMQ,SAClBR,EAAMQ,QAAQC,WA4BhB,OACC,4BAAQC,UAAU,UACjB,qCAEA,2BACCC,IAAKX,EACLU,UAAU,WACVE,YAAY,yBACZC,MAAOR,EACPS,SAjCc,SAACC,GAGjBT,EAAQS,EAAEC,OAAOH,QA+BfI,UA5Be,SAACF,GAClB,GDnB+B,KCmB3BA,EAAEG,QAAN,CAEA,IAAML,EAAQR,EAAKc,OAEnB,GAAIN,EAAO,CACV,IAAMO,EAAO,CACZC,GAAIC,KAAKC,MACTlB,KAAMQ,EACNW,WAAW,GAGZtB,EAAS,CAAEuB,KAAM,SAAUC,QAASN,IAEpCd,EAAQ,W,gBCmBLqB,EAAoD,SAAC,GAAc,IAAZP,EAAW,EAAXA,KACtDQ,EAAe3B,iBAAyB,MACxCC,EAAWC,wBAFsD,EAGjCC,mBAAiBgB,EAAKf,MAHW,mBAGhEwB,EAHgE,KAGnDC,EAHmD,OAIzC1B,oBAAkB,GAJuB,mBAIhE2B,EAJgE,KAIvDC,EAJuD,KAMvEzB,qBAAU,WACLwB,GAAWH,GAAgBA,EAAapB,SAC3CoB,EAAapB,QAAQC,UAEpB,CAACsB,IAEJ,IAIME,EAAY,WACjB/B,EAAS,CAAEuB,KAAM,UAAWC,QAAS,CAAEL,GAAID,EAAKC,OAW3Ca,EAAS,WACd,IAAM7B,EAAewB,EAAYV,OAE5Bd,EAEMA,IAASe,EAAKe,OACxBjC,EAAS,CACRuB,KAAM,SACNC,QAAS,CACRL,GAAID,EAAKC,GACThB,KAAMwB,KAGRG,GAAW,IATXC,KAmBF,OACC,wBACCvB,UAAW0B,IAAW,CACrBZ,UAAWJ,EAAKI,UAChBO,QAASA,KAGV,yBAAKrB,UAAU,QACd,2BACCA,UAAU,SACVe,KAAK,WACLY,QAASjB,EAAKI,UACdV,SAnDa,WAChBZ,EAAS,CAAEuB,KAAM,SAAUC,QAAS,CAAEL,GAAID,EAAKC,SAoD7C,2BAAOiB,cA7CK,WACdN,GAAW,KA4CsBZ,EAAKf,MACpC,4BAAQK,UAAU,UAAU6B,QAASN,KAGtC,2BACCtB,IAAKiB,EACLlB,UAAU,OACVG,MAAOgB,EACPf,SAjDc,SAACC,GACjBe,EAAef,EAAEC,OAAOH,QAiDtBqB,OAAQA,EACRjB,UA9Be,SAACF,GFhGa,KEiG3BA,EAAEyB,OACLN,SAkCYO,EAlIuB,WAAO,IAAD,EACbC,uBAC7B,SAACC,GAAD,OAA+BA,KADxB9C,EADmC,EACnCA,WAAYC,EADuB,EACvBA,MAGdI,EAAWC,wBAEXyC,EAA0B9C,EAAM+C,QACrC,SAACC,EAAe1B,GAAhB,OAAgCA,EAAKI,UAAYsB,EAAQA,EAAQ,IACjE,GAGKC,EAAoBjD,EAAMkD,QAAO,SAAC5B,GACvC,OAAQvB,GACP,IFlBiC,SEmBhC,OAAQuB,EAAKI,UACd,IFnBoC,YEoBnC,OAAOJ,EAAKI,UACb,QACC,OAAO,MAaV,OACC,yBAAKd,UAAU,QACd,2BACCA,UAAU,aACVe,KAAK,WACLX,SAdiB,SAACC,GACpB,IAAMsB,EAAUtB,EAAEC,OAAOqB,QAEzBnC,EAAS,CACRuB,KAAM,YACNC,QAAS,CAAEF,UAAWa,MAUrBA,QAA6B,IAApBO,IAGV,wBAAIlC,UAAU,aACZqC,EAAUE,KAAI,SAAA7B,GAAI,OAClB,kBAAC,EAAD,CAAU8B,IAAK9B,EAAKC,GAAID,KAAMA,UC8BpB+B,EAxEU,WAAO,IAAD,EACAT,uBAC7B,SAACC,GAAD,OAA+BA,KADxB9C,EADsB,EACtBA,WAAYC,EADU,EACVA,MAGdI,EAAWC,wBAEXyC,EAA0B9C,EAAM+C,QACrC,SAACC,EAAe1B,GAAhB,OACCA,EAAKI,UAAYsB,EAAQA,EAAQ,IAClC,GAGKM,EAAkB,SAACvD,GACxBK,EAAS,CACRuB,KAAM,gBACNC,QAAS,CAAE7B,iBAQb,OAAOC,EAAMuD,OACZ,4BAAQ3C,UAAU,UACjB,0BAAMA,UAAU,cACf,gCAASkC,GADV,QAEsB,IAApBA,EAAwB,GAAK,IAF/B,SAKA,wBAAIlC,UAAU,WACb,4BAEC,uBACC6B,QAAS,kBAAMa,EHxCY,QGyC3B1C,UAAW0B,IAAW,CACrBkB,SH1C0B,QG0ChBzD,KAHZ,QAQK,IACN,4BAEC,uBACC0C,QAAS,kBAAMa,EHlDe,WGmD9B1C,UAAW0B,IAAW,CACrBkB,SHpD6B,WGoDnBzD,KAHZ,WAQK,IACN,4BACC,uBACC0C,QAAS,kBAAMa,EH3DkB,cG4DjC1C,UAAW0B,IAAW,CACrBkB,SH7DgC,cG6DtBzD,KAHZ,eAWF,4BAAQa,UAAU,kBAAkB6B,QA9Cb,WACxBrC,EAAS,CAAEuB,KAAM,qBA6ChB,oBAIE,MC9DU8B,EARO,kBACrB,yBAAK7C,UAAU,WACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDI8C,G,MAAQC,uBNuBS,SAACd,EAAiBe,GAA8B,IAC9DjC,EAAkBiC,EAAlBjC,KAAMC,EAAYgC,EAAZhC,QAId,OAFAiC,QAAQC,IAAInC,EAAMC,GAEVgC,EAAOjC,MACd,IAAK,SACJ,OAAO,EAAP,GAAYkB,EAAZ,CAAmB7C,MAAM,GAAD,mBAAM6C,EAAM7C,OAAZ,CAAmB4B,MAC5C,IAAK,SACJ,OAAO,EAAP,GACIiB,EADJ,CAEC7C,MAAO6C,EAAM7C,MAAMmD,KAAI,SAAA7B,GAAI,OAC1BA,EAAKC,KAAOK,EAAQL,GAApB,KACQD,EADR,CACcf,KAAMqB,EAAQrB,OACzBe,OAGN,IAAK,SACJ,OAAO,EAAP,GACIuB,EADJ,CAEC7C,MAAO6C,EAAM7C,MAAMmD,KAAI,SAAA7B,GAAI,OAC1BA,EAAKC,KAAOK,EAAQL,GAApB,KACQD,EADR,CACcI,WAAYJ,EAAKI,YAC5BJ,OAGN,IAAK,YACJ,OAAO,EAAP,GACIuB,EADJ,CAEC7C,MAAO6C,EAAM7C,MAAMmD,KAAI,SAAA7B,GAAI,YACvBA,EADuB,CAE1BI,UAAWE,EAAQF,iBAGtB,IAAK,UACJ,OAAO,EAAP,GACImB,EADJ,CAEC7C,MAAO6C,EAAM7C,MAAMkD,QAAO,SAAA5B,GAAI,OAAIA,EAAKC,KAAOK,EAAQL,QAExD,IAAK,iBACJ,OAAO,EAAP,GACIsB,EADJ,CAEC7C,MAAO6C,EAAM7C,MAAMkD,QAAO,SAAA5B,GAAI,OAAKA,EAAKI,eAE1C,IAAK,gBACJ,OAAO,EAAP,GAAYmB,EAAZ,CAAmB9C,WAAY6B,EAAQ7B,aACxC,QACC,OAAO8C,KMtEyB/C,IAEnCiE,IAASC,OACR,kBAAC,WAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,OAEDO,SAASC,eAAe,SP2HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.63936bc2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ALL_TODOS } from './constants';\n\nexport type NowShowing = string;\nexport type Todo = {\n\tid: number;\n\ttext: string;\n\tcompleted: boolean;\n\tname?: string;\n};\nexport type AppState = {\n\tnowShowing: NowShowing;\n\ttodos: Todo[];\n};\n\nexport type Action =\n\t| { type: 'create'; payload: Todo }\n\t| { type: 'update'; payload: any } // why error\n\t| { type: 'toggle'; payload: { id: Todo['id'] } }\n\t| { type: 'toggleAll'; payload: { completed: Todo['completed'] } }\n\t| { type: 'destroy'; payload: { id: Todo['id'] } }\n\t| { type: 'clearCompleted'; payload: null }\n\t| {\n\t\t\ttype: 'toggleShowing';\n\t\t\tpayload: { nowShowing: AppState['nowShowing'] };\n\t  };\n\nexport const initialState: AppState = {\n\tnowShowing: ALL_TODOS,\n\ttodos: [],\n};\n\nexport const reducer = (state: AppState, action: Action): AppState => {\n\tconst { type, payload } = action;\n\n\tconsole.log(type, payload);\n\n\tswitch (action.type) {\n\t\tcase 'create':\n\t\t\treturn { ...state, todos: [...state.todos, payload] };\n\t\tcase 'update':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.map(todo =>\n\t\t\t\t\ttodo.id === payload.id\n\t\t\t\t\t\t? { ...todo, text: payload.text }\n\t\t\t\t\t\t: todo\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'toggle':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.map(todo =>\n\t\t\t\t\ttodo.id === payload.id\n\t\t\t\t\t\t? { ...todo, completed: !todo.completed }\n\t\t\t\t\t\t: todo\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'toggleAll':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.map(todo => ({\n\t\t\t\t\t...todo,\n\t\t\t\t\tcompleted: payload.completed,\n\t\t\t\t})),\n\t\t\t};\n\t\tcase 'destroy':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.filter(todo => todo.id !== payload.id),\n\t\t\t};\n\t\tcase 'clearCompleted':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.filter(todo => !todo.completed),\n\t\t\t};\n\t\tcase 'toggleShowing':\n\t\t\treturn { ...state, nowShowing: payload.nowShowing };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","export const ALL_TODOS: string = 'all';\nexport const ACTIVE_TODOS: string = 'active';\nexport const COMPLETED_TODOS: string = 'completed';\n\nexport const ENTER_KEY: number = 13;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from '@lokibai/react-store';\nimport { ENTER_KEY } from './constants';\nimport { Action } from './store';\n\nconst Header: React.FC = () => {\n\tconst input = useRef<HTMLInputElement>(null);\n\tconst dispatch = useDispatch();\n\tconst [text, setText] = useState<string>('');\n\n\tuseEffect(() => {\n\t\tif (input && input.current) {\n\t\t\tinput.current.focus();\n\t\t}\n\t});\n\n\tconst onChange = (e: {\n\t\ttarget: { value: React.SetStateAction<string> };\n\t}): void => {\n\t\tsetText(e.target.value);\n\t};\n\n\tconst onKeyDown = (e: { keyCode: number }) => {\n\t\tif (e.keyCode !== ENTER_KEY) return;\n\n\t\tconst value = text.trim();\n\n\t\tif (value) {\n\t\t\tconst todo = {\n\t\t\t\tid: Date.now(),\n\t\t\t\ttext: value,\n\t\t\t\tcompleted: false,\n\t\t\t};\n\n\t\t\tdispatch({ type: 'create', payload: todo } as Action);\n\n\t\t\tsetText('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<header className='header'>\n\t\t\t<h1>todos</h1>\n\n\t\t\t<input\n\t\t\t\tref={input}\n\t\t\t\tclassName='new-todo'\n\t\t\t\tplaceholder='What needs to be done?'\n\t\t\t\tvalue={text}\n\t\t\t\tonChange={onChange}\n\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t/>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { useSelector, useDispatch } from '@lokibai/react-store';\nimport { ACTIVE_TODOS, COMPLETED_TODOS, ENTER_KEY } from './constants';\nimport { AppState, Todo, Action } from './store';\n\nconst Main: React.FunctionComponent = () => {\n\tconst { nowShowing, todos } = useSelector(\n\t\t(state: AppState): AppState => state\n\t);\n\tconst dispatch = useDispatch();\n\n\tconst activeTodoCount: number = todos.reduce(\n\t\t(total: number, todo: Todo) => (todo.completed ? total : total + 1),\n\t\t0\n\t);\n\n\tconst showTodos: Todo[] = todos.filter((todo: Todo) => {\n\t\tswitch (nowShowing) {\n\t\t\tcase ACTIVE_TODOS:\n\t\t\t\treturn !todo.completed;\n\t\t\tcase COMPLETED_TODOS:\n\t\t\t\treturn todo.completed;\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t});\n\n\tconst onToggleAll = (e: { target: { checked: boolean } }): void => {\n\t\tconst checked = e.target.checked;\n\n\t\tdispatch({\n\t\t\ttype: 'toggleAll',\n\t\t\tpayload: { completed: checked },\n\t\t} as Action);\n\t};\n\n\treturn (\n\t\t<div className='main'>\n\t\t\t<input\n\t\t\t\tclassName='toggle-all'\n\t\t\t\ttype='checkbox'\n\t\t\t\tonChange={onToggleAll}\n\t\t\t\tchecked={activeTodoCount === 0}\n\t\t\t/>\n\n\t\t\t<ul className='todo-list'>\n\t\t\t\t{showTodos.map(todo => (\n\t\t\t\t\t<TodoItem key={todo.id} todo={todo} />\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nconst TodoItem: React.FunctionComponent<{ todo: Todo }> = ({ todo }) => {\n\tconst editingInput = useRef<HTMLInputElement>(null);\n\tconst dispatch = useDispatch();\n\tconst [editingText, setEditingText] = useState<string>(todo.text);\n\tconst [editing, setEditing] = useState<boolean>(false);\n\n\tuseEffect(() => {\n\t\tif (editing && editingInput && editingInput.current) {\n\t\t\teditingInput.current.focus();\n\t\t}\n\t}, [editing]);\n\n\tconst onToggle = (): void => {\n\t\tdispatch({ type: 'toggle', payload: { id: todo.id } } as Action);\n\t};\n\n\tconst onDestroy = (): void => {\n\t\tdispatch({ type: 'destroy', payload: { id: todo.id } } as Action);\n\t};\n\n\tconst onEdit = (): void => {\n\t\tsetEditing(true);\n\t};\n\n\tconst onChange = (e: { target: { value: string } }): void => {\n\t\tsetEditingText(e.target.value);\n\t};\n\n\tconst onBlur = (): void => {\n\t\tconst text: string = editingText.trim();\n\n\t\tif (!text) {\n\t\t\tonDestroy();\n\t\t} else if (text !== todo.name) {\n\t\t\tdispatch({\n\t\t\t\ttype: 'update',\n\t\t\t\tpayload: {\n\t\t\t\t\tid: todo.id,\n\t\t\t\t\ttext: editingText,\n\t\t\t\t},\n\t\t\t} as Action);\n\t\t\tsetEditing(false);\n\t\t}\n\t};\n\n\tconst onKeyDown = (e: { which: number }): void => {\n\t\tif (e.which === ENTER_KEY) {\n\t\t\tonBlur();\n\t\t}\n\t};\n\n\treturn (\n\t\t<li\n\t\t\tclassName={classNames({\n\t\t\t\tcompleted: todo.completed,\n\t\t\t\tediting: editing,\n\t\t\t})}\n\t\t>\n\t\t\t<div className='view'>\n\t\t\t\t<input\n\t\t\t\t\tclassName='toggle'\n\t\t\t\t\ttype='checkbox'\n\t\t\t\t\tchecked={todo.completed}\n\t\t\t\t\tonChange={onToggle}\n\t\t\t\t/>\n\t\t\t\t<label onDoubleClick={onEdit}>{todo.text}</label>\n\t\t\t\t<button className='destroy' onClick={onDestroy} />\n\t\t\t</div>\n\n\t\t\t<input\n\t\t\t\tref={editingInput}\n\t\t\t\tclassName='edit'\n\t\t\t\tvalue={editingText}\n\t\t\t\tonChange={onChange}\n\t\t\t\tonBlur={onBlur}\n\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t/>\n\t\t</li>\n\t);\n};\n\nexport default Main;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSelector, useDispatch } from '@lokibai/react-store';\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS } from './constants';\nimport { AppState, Action, NowShowing } from './store';\n\nconst Footer: React.FC = () => {\n\tconst { nowShowing, todos } = useSelector(\n\t\t(state: AppState): AppState => state\n\t);\n\tconst dispatch = useDispatch();\n\n\tconst activeTodoCount: number = todos.reduce(\n\t\t(total: number, todo: { completed: any }) =>\n\t\t\ttodo.completed ? total : total + 1,\n\t\t0\n\t);\n\n\tconst onToggleShowing = (nowShowing: NowShowing): void => {\n\t\tdispatch({\n\t\t\ttype: 'toggleShowing',\n\t\t\tpayload: { nowShowing },\n\t\t} as Action);\n\t};\n\n\tconst onClearCompleted = (): void => {\n\t\tdispatch({ type: 'clearCompleted' } as Action);\n\t};\n\n\treturn todos.length ? (\n\t\t<footer className='footer'>\n\t\t\t<span className='todo-count'>\n\t\t\t\t<strong>{activeTodoCount}</strong> item\n\t\t\t\t{activeTodoCount === 1 ? '' : 's'} left\n\t\t\t</span>\n\n\t\t\t<ul className='filters'>\n\t\t\t\t<li>\n                    {/* eslint-disable-next-line */}\n\t\t\t\t\t<a\n\t\t\t\t\t\tonClick={() => onToggleShowing(ALL_TODOS)}\n\t\t\t\t\t\tclassName={classNames({\n\t\t\t\t\t\t\tselected: nowShowing === ALL_TODOS,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\tAll\n\t\t\t\t\t</a>\n\t\t\t\t</li>{' '}\n\t\t\t\t<li>\n                    {/* eslint-disable-next-line */}\n\t\t\t\t\t<a\n\t\t\t\t\t\tonClick={() => onToggleShowing(ACTIVE_TODOS)}\n\t\t\t\t\t\tclassName={classNames({\n\t\t\t\t\t\t\tselected: nowShowing === ACTIVE_TODOS,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\tActive\n\t\t\t\t\t</a>\n\t\t\t\t</li>{' '}\n\t\t\t\t<li>\n\t\t\t\t\t<a\n\t\t\t\t\t\tonClick={() => onToggleShowing(COMPLETED_TODOS)}\n\t\t\t\t\t\tclassName={classNames({\n\t\t\t\t\t\t\tselected: nowShowing === COMPLETED_TODOS,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\tCompleted\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<button className='clear-completed' onClick={onClearCompleted}>\n\t\t\t\tClear completed\n\t\t\t</button>\n\t\t</footer>\n\t) : null;\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nconst App: React.FC = () => (\n\t<div className='todoapp'>\n\t\t<Header />\n\t\t<Main />\n\t\t<Footer />\n\t</div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, createStore } from '@lokibai/react-store';\nimport * as serviceWorker from './serviceWorker';\nimport { initialState, reducer } from './store';\nimport App from './App';\nimport './index.css';\n\nconst store = createStore(reducer, initialState);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}